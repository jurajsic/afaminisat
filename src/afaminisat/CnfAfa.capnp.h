// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: CnfAfa.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c58994645429e13d);
CAPNP_DECLARE_SCHEMA(c34e22c05ebc547c);

}  // namespace schemas
}  // namespace capnp

namespace automata_safa_capnp {
namespace model {
namespace cnf_afa {

struct Afa {
  Afa() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c58994645429e13d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Lit {
  Lit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c34e22c05ebc547c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Afa::Reader {
public:
  typedef Afa Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVariableCount() const;

  inline bool hasOutputs() const;
  inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader getOutputs() const;

  inline bool hasClauses() const;
  inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Reader getClauses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Afa::Builder {
public:
  typedef Afa Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVariableCount();
  inline void setVariableCount( ::uint32_t value);

  inline bool hasOutputs();
  inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Builder getOutputs();
  inline void setOutputs( ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Builder initOutputs(unsigned int size);
  inline void adoptOutputs(::capnp::Orphan< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>> disownOutputs();

  inline bool hasClauses();
  inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Builder getClauses();
  inline void setClauses( ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Reader value);
  inline void setClauses(::kj::ArrayPtr<const  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Builder initClauses(unsigned int size);
  inline void adoptClauses(::capnp::Orphan< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>> disownClauses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Afa::Pipeline {
public:
  typedef Afa Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Lit::Reader {
public:
  typedef Lit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVar() const;

  inline bool getPositive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Lit::Builder {
public:
  typedef Lit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVar();
  inline void setVar( ::uint32_t value);

  inline bool getPositive();
  inline void setPositive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Lit::Pipeline {
public:
  typedef Lit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t Afa::Reader::getVariableCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Afa::Builder::getVariableCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Afa::Builder::setVariableCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Afa::Reader::hasOutputs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Afa::Builder::hasOutputs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader Afa::Reader::getOutputs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Builder Afa::Builder::getOutputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Afa::Builder::setOutputs( ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Builder Afa::Builder::initOutputs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Afa::Builder::adoptOutputs(
    ::capnp::Orphan< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>> Afa::Builder::disownOutputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Afa::Reader::hasClauses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Afa::Builder::hasClauses() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Reader Afa::Reader::getClauses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Builder Afa::Builder::getClauses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Afa::Builder::setClauses( ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Afa::Builder::setClauses(::kj::ArrayPtr<const  ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>::Builder Afa::Builder::initClauses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Afa::Builder::adoptClauses(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>> Afa::Builder::disownClauses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::automata_safa_capnp::model::cnf_afa::Lit,  ::capnp::Kind::STRUCT>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Lit::Reader::getVar() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Lit::Builder::getVar() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Lit::Builder::setVar( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Lit::Reader::getPositive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Lit::Builder::getPositive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Lit::Builder::setPositive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

